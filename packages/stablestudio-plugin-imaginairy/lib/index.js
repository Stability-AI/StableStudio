var c=a=>{let t,e=new Set,n=(r,o)=>{let l=typeof r=="function"?r(t):r;if(!Object.is(l,t)){let b=t;t=o??typeof l!="object"?l:Object.assign({},t,l),e.forEach(p=>p(t,b))}},s=()=>t,i={setState:n,getState:s,subscribe:r=>(e.add(r),()=>e.delete(r)),destroy:()=>{(import.meta.env&&import.meta.env.MODE)!=="production"&&console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),e.clear()}};return t=a(n,s,i),i},d=a=>a?c(a):c,u=a=>t=>d((e,n)=>a({set:e,get:n,context:t}));var g="http://127.0.0.1:8000/api/stablestudio",I=u(({set:a,get:t})=>({imagesGeneratedSoFar:0,manifest:{name:"imaginAIry Local Diffusion Plugin",author:"Bryce Drennan",link:"https://github.com/brycedrennan/imaginAIry",icon:`${window.location.origin}/DummyImage.png`,version:"0.0.1",license:"MIT",description:"Generate images using imaginAIry."},createStableDiffusionImages:async e=>{console.log(e),a(({imagesGeneratedSoFar:o})=>({imagesGeneratedSoFar:o+4}));let n=t().settings.apiUrl.value??g,i=await(await fetch(n+"/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:await S(e)})).json();console.log(i);let r=i.images.map(o=>{let l=y(o.blob,"image/jpeg");return{id:o.id,createdAt:new Date(o.createdAt),blob:l}});return{id:`${Math.random()*1e7}`,images:r}},getStableDiffusionModels:async()=>{let e=t().settings.apiUrl.value??g;return await(await fetch(e+"/models")).json()},getStableDiffusionSamplers:async()=>{let e=t().settings.apiUrl.value??g;return await(await fetch(e+"/samplers")).json()},getStableDiffusionDefaultCount:()=>1,getStableDiffusionDefaultInput:()=>(console.log("getStableDiffusionDefaultInput"),{steps:16,sampler:{id:"k_dpmpp_2m",name:"k_dpmpp_2m"},model:"SD-1.5"}),getStatus:()=>{let{imagesGeneratedSoFar:e}=t();return{indicator:"success",text:e>0?`${e} images generated`:"Ready"}},settings:{apiUrl:{type:"string",default:"",placeholder:"URL to imaginAIry API",value:localStorage.getItem("imaginairy-apiUrl")??g}},setSetting:(e,n)=>{a(({settings:i})=>({settings:{[e]:{...i[e],value:n}}}));let s="imaginairy-"+e;console.log(s+" : "+n),localStorage.setItem(s,n)}}));function y(a,t=""){let e=atob(a),n=new Array(e.length);for(let i=0;i<e.length;i++)n[i]=e.charCodeAt(i);let s=new Uint8Array(n);return new Blob([s],{type:t})}function m(a){return new Promise((t,e)=>{let n=new FileReader;n.onloadend=()=>{let s=n.result;t(s.split(",")[1])},n.onerror=e,n.readAsDataURL(a)})}async function S(a){let t=JSON.parse(JSON.stringify(a));if(a?.input?.initialImage?.blob){let e=await m(a.input.initialImage.blob);t.input.initialImage.blob=e}if(a?.input?.maskImage?.blob){let e=await m(a.input.maskImage.blob);t.input.maskImage.blob=e}return JSON.stringify(t)}export{I as createPlugin};
//# sourceMappingURL=index.js.map
